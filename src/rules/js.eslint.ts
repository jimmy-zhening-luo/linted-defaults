import { State } from "./state";

// DOC: https://eslint.org/docs/latest/rules/
export default {
  name: "enable",
  rules: {
    // #region PROBLEMS
    // DOC: https://eslint.org/docs/latest/rules/#possible-problems
    "array-callback-return": [
      State.ON,
      {
        // allowImplicit: false /* @default: false */,
        checkForEach: true /* @default: false */,
        allowVoid: true /* only works if checkForEach | @default: false */,
      },
    ],
    "constructor-super": State.ON /* tsc */,
    "for-direction": State.ON,
    "getter-return": State.ON /* tsc */,
    "no-async-promise-executor": State.ON,
    "no-await-in-loop": State.ON,
    "no-class-assign": State.ON,
    "no-compare-neg-zero": State.ON,
    "no-cond-assign": State.ON,
    "no-const-assign": State.ON /* tsc */,
    "no-constant-binary-expression": State.ON,
    "no-constant-condition": [
      State.ON,
      {
        checkLoops: "all" /* none === false | all === true | @default: allExceptWhileTrue */,
      },
    ] /* BUG: incorrect option description (claims "all" is ok): https://eslint.org/docs/latest/rules/no-constant-condition */,
    "no-constructor-return": State.ON,
    "no-control-regex": State.ON,
    "no-debugger": State.ON,
    "no-dupe-args": State.ON /* tsc */,
    "no-dupe-class-members": State.ON /* TS-capable BUT tsc */,
    "no-dupe-else-if": State.ON,
    "no-dupe-keys": State.ON /* tsc */,
    "no-duplicate-case": State.ON,
    "no-duplicate-imports": [
      State.ON,
      {
        includeExports: true /* @default false */,
        allowSeparateTypeImports: true /* @default false */,
      },
    ],
    "no-empty-character-class": State.ON,
    "no-empty-pattern": State.ON,
    "no-ex-assign": State.ON,
    "no-fallthrough": State.ON,
    "no-func-assign": State.ON /* tsc */,
    "no-import-assign": State.ON /* tsc (except Object.assign()) */,
    "no-inner-declarations": [
      State.ON,
      "both" /* both (function & var) | @default functions */,
    ],
    "no-invalid-regexp": State.ON,
    "no-irregular-whitespace": State.ON,
    "no-loss-of-precision": State.ON /* TS-capable, originally had TSLint rule but was deprecated */,
    "no-misleading-character-class": State.ON,
    "no-new-native-nonconstructor": State.ON,
    "no-obj-calls": State.ON /* tsc */,
    "no-promise-executor-return": [
      State.ON,
      {
        allowVoid: true /* @default false */,
      },
    ],
    "no-prototype-builtins": State.ON,
    "no-self-assign": State.ON,
    "no-self-compare": State.ON,
    "no-setter-return": State.ON /* tsc */,
    "no-sparse-arrays": State.ON,
    "no-template-curly-in-string": State.ON,
    "no-this-before-super": State.ON /* tsc */,
    "no-unassigned-vars": State.ON,
    "no-undef": State.ON /* tsc */,
    "no-unexpected-multiline": State.ON,
    "no-unmodified-loop-condition": State.ON,
    "no-unreachable": State.ON /* tsc */,
    "no-unreachable-loop": State.ON,
    "no-unsafe-finally": State.ON,
    "no-unsafe-negation": [
      State.ON,
      {
        enforceForOrderingRelations: true /* @default false */,
      },
    ] /* tsc */,
    "no-unsafe-optional-chaining": [
      State.ON,
      {
        disallowArithmeticOperators: true /* @default false */,
      },
    ],
    "no-unused-private-class-members": State.ON,
    "no-unused-vars": State.ON /* TSLint */,
    "no-use-before-define": [
      State.ON,
      {
        // functions: true,
        // classes: true,
        // variables: true,
        // allowNamedExports: false,
        // enums: true,
        typedefs: false /* changed 14.2.2 (still questionable) */,
        // ignoreTypeReferences: true,
      },
    ] /* TS-capable */,
    "no-useless-assignment": State.ON,
    "no-useless-backreference": State.ON,
    "require-atomic-updates": State.ON,
    "use-isnan": [
      State.ON,
      {
        // enforceForSwitchCase: true,
        enforceForIndexOf: true /* @default false */,
      },
    ],
    "valid-typeof": [
      State.ON,
      {
        requireStringLiterals: true /* @default false */,
      },
    ],
    // #endregion

    // #region SUGGESTIONS
    // [ https://eslint.org/docs/latest/rules/#suggestions ]
    "accessor-pairs": [
      State.ON,
      {
        // setWithoutGet: true,
        // getWithoutSet: false,
        // enforceForClassMembers: true,
        enforceForTSTypes: true /* @default false */,
      },
    ],
    "arrow-body-style": State.ON,
    "block-scoped-var": State.ON,
    // camelcase: State.OFF /* preference */,
    // "capitalized-comments": State.OFF /* preference */,
    // "class-methods-use-this": State.OFF /* TS-capable; (preference) */,
    // complexity: State.OFF /* preference */,
    "consistent-return": State.ON /* tsc -- TSLint:State.OFF: tsconfig: noImplicitReturns */,
    "consistent-this": State.ON,
    curly: [
      State.ON,
      "multi" /* multi | multi-line | multi-or-nest | consistent | @default all */,
    ],
    // "default-case": State.OFF /* preference: don't care */,
    "default-case-last": State.ON,
    "default-param-last": State.ON /* TS-capable */,
    "dot-notation": State.ON /* TSLint */,
    eqeqeq: State.ON,
    // "func-name-matching": State.OFF /* preference */,
    // "func-names": State.OFF /* preference */,
    // "func-style": State.OFF /* TS-capable BUT preference */,
    // "grouped-accessor-pairs": State.OFF /* preference -- BUG: requires adjacency, not as described in documentation */,
    // "guard-for-in": State.OFF /* preference - not helpful because using for-in on non-literal objects is bad practice and this rule doesn't guard against that anyway, while adding a pointless check to known object literals */,
    // "id-denylist": State.OFF /* preference */,
    // "id-length": State.OFF /* preference */,
    // "id-match": State.OFF /* preference */,
    "init-declarations": State.ON /* TS-capable */,
    "logical-assignment-operators": [
      State.ON,
      "always" /* never | @default always */,
      {
        enforceForIfStatements: true /* @default false */,
      },
    ],
    // "max-classes-per-file": State.OFF /* preference */,
    // "max-depth": State.OFF /* preference */,
    // "max-lines": State.OFF /* preference */,
    // "max-lines-per-function": State.OFF /* preference */,
    // "max-nested-callbacks": State.OFF /* preference */,
    // "max-params": State.OFF /* TS-capable BUT preference -- TSLint:State.OFF: preference */,
    // "max-statements": State.OFF /* preference */,
    // "multiline-comment-style": State.OFF /* preference */,
    // "new-cap": State.OFF /* preference -- breaks Scriptable */,
    "no-alert": State.ON,
    "no-array-constructor": State.ON /* TS-capable */,
    "no-bitwise": State.ON,
    "no-caller": State.ON,
    "no-case-declarations": State.ON,
    // "no-console": State.OFF /* preference -- breaks Node.js console applications and Scriptable, and otherwise unnecessarily hampers browser test code */,
    "no-continue": State.ON,
    "no-delete-var": State.ON,
    "no-div-regex": State.ON,
    // "no-else-return": State.OFF /* preference */,
    "no-empty": State.ON,
    "no-empty-function": [
      State.ON,
      {
        allow: [
          "constructors",
          "privateConstructors",
          "protectedConstructors",
          "decoratedFunctions",
          "overrideMethods",
        ] /* (functions | `${arrow|generator|async|TS:decorated}Functions` | methods | `${generator|async|TS:override}Methods` | `${g|s}etters` | constructors | TS:`${private|protected}Constructors`)[] | @default [] */,
      },
    ] /* TS-capable */,
    "no-empty-static-block": State.ON,
    "no-eq-null": State.ON,
    "no-eval": State.ON,
    "no-extend-native": State.ON,
    "no-extra-bind": State.ON,
    "no-extra-boolean-cast": [
      State.ON,
      {
        enforceForLogicalOperands: true /* @default false */,
      },
    ],
    "no-extra-label": State.ON,
    "no-global-assign": State.ON,
    "no-implicit-coercion": [
      State.ON,
      {
        // "boolean": true,
        // number: true,
        // string: true,
        disallowTemplateShorthand: true,
        // allow: [],
      },
    ],
    // "no-implicit-globals": State.OFF /* investigate (breaks Scriptable? breaks Sveltekit?) */,
    "no-implied-eval": State.ON /* TSLint */,
    // "no-inline-comments": State.OFF /* preference */,
    "no-invalid-this": [
      State.ON,
      {
        capIsConstructor: false /* @default true */,
      },
    ] /* TS-capable BUT tsc: TSLint:State.OFF: tsconfig: { strict, noImplicitThis } */,
    "no-iterator": State.ON,
    "no-label-var": State.ON,
    "no-lone-blocks": State.ON,
    // "no-lonely-if": State.OFF /* preference */,
    "no-loop-func": State.ON /* TS-capable */,
    // "no-magic-numbers": State.OFF /* TS-capable BUT preference - breaks TypeScript number literals, even with most liberal exceptions */,
    "no-multi-assign": State.ON,
    "no-multi-str": State.ON,
    // "no-negated-condition": State.OFF /* preference */,
    // "no-nested-ternary": State.OFF /* preference */,
    "no-new": State.ON,
    "no-new-func": State.ON,
    "no-new-wrappers": State.ON,
    "no-nonoctal-decimal-escape": State.ON,
    "no-object-constructor": State.ON,
    "no-octal": State.ON,
    "no-octal-escape": State.ON,
    "no-param-reassign": [
      State.ON,
      {
        props: true /* @default false */,
        // ignorePropertyModificationsFor: [],
        // ignorePropertyModificationsForRegex: [],
      },
    ],
    "no-plusplus": [
      State.ON,
      {
        allowForLoopAfterthoughts: true /* @default false */,
      },
    ],
    "no-proto": State.ON,
    // "no-redeclare": State.OFF /* tsc -- TSLint:State.OFF: tsc (let, const, -var) */,
    // "no-regex-spaces": State.OFF /* preference */,
    // "no-restricted-exports": State.OFF /* preference */,
    // "no-restricted-globals": State.OFF /* TS-capable BUT preference */,
    // "no-restricted-imports": State.OFF /* preference -- TSLint:State.OFF */,
    // "no-restricted-properties": State.OFF /* preference */,
    // "no-restricted-syntax": State.OFF /* preference */,
    // "no-return-assign": State.OFF /* "always" | "except-parens" (disallow assignments unless enclosed in parens) */,
    "no-script-url": State.ON,
    "no-sequences": State.ON,
    // "no-shadow": State.OFF /* TS-capable BUT investigate */,
    "no-shadow-restricted-names": State.ON,
    // "no-ternary": State.OFF /* preference */,
    "no-throw-literal": State.ON /* TSLint */,
    "no-undef-init": State.ON,
    // "no-undefined": State.OFF /* investigate (breaks Scriptable? breaks Sveltekit?) */,
    // "no-underscore-dangle": State.OFF /* preference */,
    "no-unneeded-ternary": State.ON,
    "no-unused-expressions": [
      State.ON,
      {
        allowShortCircuit: true /* @default false */,
        allowTernary: true /* @default false */,
      },
    ] /* TS-capable */,
    "no-unused-labels": State.ON,
    "no-useless-call": State.ON,
    "no-useless-catch": State.ON,
    "no-useless-computed-key": State.ON,
    "no-useless-concat": State.ON,
    "no-useless-constructor": State.ON /* TS-capable */,
    "no-useless-escape": [
      State.ON,
      {
        allowRegexCharacters: ["-"] /* why isn't this the default behavior? */,
      },
    ],
    "no-useless-rename": State.ON,
    "no-useless-return": State.ON,
    "no-var": State.ON /* TS-capable */,
    "no-void": [
      State.ON,
      {
        allowAsStatement: true /* @default false */,
      },
    ],
    // "no-warning-comments": State.OFF /* preference */,
    "no-with": State.ON,
    "object-shorthand": State.ON,
    "one-var": [
      State.ON,
      {
        "var": "consecutive",
        let: "consecutive",
        "const": "consecutive",
        using: "consecutive",
        awaitUsing: "consecutive",
        separateRequires: true,
      },
    ],
    "operator-assignment": State.ON,
    "prefer-arrow-callback": State.ON /* TS-capable */,
    "prefer-const": [
      State.ON,
      {
        destructuring: "all" /* any | @default all */,
      },
    ],
    "prefer-destructuring": [
      State.ON,
      {
        AssignmentExpression: {
          array: false /* @default true */,
          object: false /* @default true */,
        },
      },
    ] /* TSLint */,
    "prefer-exponentiation-operator": State.ON,
    // "prefer-named-capture-group": State.OFF,
    "prefer-numeric-literals": State.ON,
    "prefer-object-has-own": State.ON,
    "prefer-object-spread": State.ON,
    "prefer-promise-reject-errors": State.ON,
    "prefer-regex-literals": [
      State.ON,
      {
        disallowRedundantWrapping: true /* @default false */,
      },
    ] /* TSLint */,
    "prefer-rest-params": State.ON,
    "prefer-spread": State.ON,
    // "prefer-template": State.OFF /* preference: performance */,
    "preserve-caught-error": [
      State.ON,
      {
        requireCatchParameter: true,
      },
    ],
    radix: [
      State.ON,
      "as-needed" /* as-needed | @default always */,
    ],
    "require-await": State.ON /* TSLint */,
    "require-unicode-regexp": State.ON,
    "require-yield": State.ON,
    // "sort-imports": State.OFF /* preference */,
    // "sort-keys": State.OFF /* preference */,
    // "sort-vars": State.OFF /* preference */,
    // strict: State.OFF /* preference */,
    // "symbol-description": State.OFF /* preference */,
    "vars-on-top": State.ON,
    yoda: State.ON,
    // #endregion

    // #region FORMATTING
    // [ https://eslint.org/docs/latest/rules/#layout--formatting ]
    // "unicode-bom": State.OFF /* preference: don't care */,
    // #endregion
  } as const,
};
