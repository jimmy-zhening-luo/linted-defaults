import {
  ID,
  // OFF,
  ON,
  never,
} from "../_strings";

export const TsEnable = {
  id: ID.Enable.Enable,
  rules: {
    // DOC: https://typescript-eslint.io/rules/?=xextension-xdeprecated#rules
    // "@typescript-eslint/adjacent-overload-signatures": OFF,
    // "@typescript-eslint/array-type": OFF /* preference: ideally, I'd like to don't-care mutable arrays while requiring readonly [] syntax for immutable arrays, but there is no way to do that with the current rule options */,
    "@typescript-eslint/await-thenable": ON,
    "@typescript-eslint/ban-ts-comment": ON,
    "@typescript-eslint/ban-tslint-comment": ON,
    "@typescript-eslint/class-literal-property-style": ON,
    "@typescript-eslint/consistent-generic-constructors": ON,
    "@typescript-eslint/consistent-indexed-object-style": ON,
    "@typescript-eslint/consistent-type-assertions": [
      ON,
      {
        arrayLiteralTypeAssertions: never,
        objectLiteralTypeAssertions: never,
      },
    ],
    // "@typescript-eslint/consistent-type-definitions": OFF,
    "@typescript-eslint/consistent-type-exports": ON,
    "@typescript-eslint/consistent-type-imports": ON,
    // "@typescript-eslint/explicit-function-return-type": OFF,
    "@typescript-eslint/explicit-member-accessibility": [
      ON,
      {
        overrides: {
          constructors: "no-public",
        },
      },
    ],
    // "@typescript-eslint/explicit-module-boundary-types": OFF,
    "@typescript-eslint/member-ordering": [
      ON,
      {
        "default": {
          optionalityOrder: "required-first",
        },
      },
    ],
    "@typescript-eslint/method-signature-style": ON,
    // "@typescript-eslint/naming-convention": OFF,
    "@typescript-eslint/no-array-delete": ON,
    "@typescript-eslint/no-base-to-string": ON,
    "@typescript-eslint/no-confusing-non-null-assertion": ON,
    "@typescript-eslint/no-confusing-void-expression": [
      ON,
      {
        ignoreArrowShorthand: true,
        ignoreVoidOperator: true,
        ignoreVoidReturningFunctions: true,
      },
    ],
    // "@typescript-eslint/no-deprecated": OFF /* incompatible: Cannot be used with jsDocParsingMode: "none" */,
    "@typescript-eslint/no-duplicate-enum-values": ON,
    "@typescript-eslint/no-duplicate-type-constituents": ON,
    "@typescript-eslint/no-dynamic-delete": ON,
    "@typescript-eslint/no-empty-object-type": ON,
    "@typescript-eslint/no-explicit-any": [
      ON,
      {
        fixToUnknown: true,
      },
    ],
    "@typescript-eslint/no-extra-non-null-assertion": ON,
    "@typescript-eslint/no-extraneous-class": [
      ON,
      {
        allowEmpty: true,
      },
    ],
    "@typescript-eslint/no-floating-promises": [
      ON,
      {
        checkThenables: true,
      },
    ],
    "@typescript-eslint/no-for-in-array": ON,
    "@typescript-eslint/no-import-type-side-effects": ON,
    "@typescript-eslint/no-inferrable-types": ON,
    "@typescript-eslint/no-invalid-void-type": ON,
    "@typescript-eslint/no-meaningless-void-operator": [
      ON,
      {
        checkNever: true,
      },
    ],
    "@typescript-eslint/no-misused-new": ON,
    "@typescript-eslint/no-misused-promises": ON,
    "@typescript-eslint/no-misused-spread": ON,
    "@typescript-eslint/no-mixed-enums": ON,
    // "@typescript-eslint/no-namespace": OFF,
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": ON,
    "@typescript-eslint/no-non-null-asserted-optional-chain": ON,
    // "@typescript-eslint/no-non-null-assertion": OFF /* preference */,
    "@typescript-eslint/no-redundant-type-constituents": ON,
    // "@typescript-eslint/no-restricted-types": OFF /* preference - no shared custom types across all projects that I wish to ban */,
    "@typescript-eslint/no-require-imports": ON,
    "@typescript-eslint/no-this-alias": ON,
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": ON,
    "@typescript-eslint/no-unnecessary-condition": ON,
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": ON,
    "@typescript-eslint/no-unnecessary-qualifier": ON,
    "@typescript-eslint/no-unnecessary-template-expression": ON,
    "@typescript-eslint/no-unnecessary-type-arguments": ON,
    "@typescript-eslint/no-unnecessary-type-assertion": ON,
    "@typescript-eslint/no-unnecessary-type-constraint": ON,
    "@typescript-eslint/no-unnecessary-type-conversion": ON,
    "@typescript-eslint/no-unnecessary-type-parameters": ON,
    "@typescript-eslint/no-unsafe-argument": ON,
    "@typescript-eslint/no-unsafe-assignment": ON,
    "@typescript-eslint/no-unsafe-call": ON,
    "@typescript-eslint/no-unsafe-declaration-merging": ON,
    "@typescript-eslint/no-unsafe-enum-comparison": ON,
    "@typescript-eslint/no-unsafe-function-type": ON,
    "@typescript-eslint/no-unsafe-member-access": [
      ON,
      {
        allowOptionalChaining: true,
      },
    ],
    "@typescript-eslint/no-unsafe-return": ON,
    // "@typescript-eslint/no-unsafe-type-assertion": OFF,
    "@typescript-eslint/no-unsafe-unary-minus": ON,
    "@typescript-eslint/no-useless-empty-export": ON,
    "@typescript-eslint/no-wrapper-object-types": ON,
    // "@typescript-eslint/non-nullable-type-assertion-style": OFF /* preference */,
    "@typescript-eslint/parameter-properties": [
      ON,
      {
        prefer: "parameter-property" /* parameter-property | @default class-property */,
      },
    ],
    "@typescript-eslint/prefer-as-const": ON,
    // "@typescript-eslint/prefer-enum-initializers": OFF /* preference */,
    "@typescript-eslint/prefer-find": ON,
    "@typescript-eslint/prefer-for-of": ON,
    "@typescript-eslint/prefer-function-type": ON,
    "@typescript-eslint/prefer-includes": ON,
    "@typescript-eslint/prefer-literal-enum-member": ON,
    "@typescript-eslint/prefer-namespace-keyword": ON,
    "@typescript-eslint/prefer-nullish-coalescing": ON /* requires tsconfig: strictNullChecks */,
    "@typescript-eslint/prefer-optional-chain": ON,
    "@typescript-eslint/prefer-readonly": ON,
    // "@typescript-eslint/prefer-readonly-parameter-types": OFF /* preference - WAY too restrictive */,
    "@typescript-eslint/prefer-reduce-type-parameter": ON,
    "@typescript-eslint/prefer-regexp-exec": ON,
    "@typescript-eslint/prefer-return-this-type": ON,
    "@typescript-eslint/prefer-string-starts-ends-with": ON,
    "@typescript-eslint/promise-function-async": ON,
    "@typescript-eslint/related-getter-setter-pairs": ON,
    "@typescript-eslint/require-array-sort-compare": ON,
    "@typescript-eslint/restrict-plus-operands": [
      ON,
      {
        allowAny: false,
        allowBoolean: false,
        allowNullish: false,
        allowNumberAndString: false,
        allowRegExp: false,
      },
    ],
    "@typescript-eslint/restrict-template-expressions": [
      ON,
      {
        allowNullish: false,
        allowNever: false,
        allowRegExp: false,
      },
    ],
    "@typescript-eslint/return-await": ON /* BUG: doc incorrectly states that this extends the DEPRECATED (since 8.46) no-return-await: https://typescript-eslint.io/rules/return-await */,
    "@typescript-eslint/strict-boolean-expressions": [
      ON,
      {
        allowNullableObject: false,
        allowString: false,
      },
    ], /* requires tsconfig: strictNullChecks */
    "@typescript-eslint/switch-exhaustiveness-check": ON,
    // "@typescript-eslint/triple-slash-reference": OFF /* preference - who gives a fuck */,
    // "@typescript-eslint/typedef": OFF /* tsconfig: { noImplicitAny, strictPropertyInitialization } */,
    "@typescript-eslint/unbound-method": ON,
    "@typescript-eslint/unified-signatures": ON,
    "@typescript-eslint/use-unknown-in-catch-callback-variable": ON,
  } as const,
};
